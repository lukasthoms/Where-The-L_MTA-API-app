// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "NyctSubwayProtoTxt.pb.h"
// @@protoc_insertion_point(imports)

@implementation NyctSubwayProtoTxtRoot
static id<PBExtensionField> NyctSubwayProtoTxtRoot_nyctFeedHeader = nil;
static id<PBExtensionField> NyctSubwayProtoTxtRoot_nyctTripDescriptor = nil;
static id<PBExtensionField> NyctSubwayProtoTxtRoot_nyctStopTimeUpdate = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [NyctSubwayProtoTxtRoot class]) {
    NyctSubwayProtoTxtRoot_nyctFeedHeader =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[FeedHeader class]
                                       fieldNumber:1001
                                      defaultValue:[NyctFeedHeader defaultInstance]
                               messageOrGroupClass:[NyctFeedHeader class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    NyctSubwayProtoTxtRoot_nyctTripDescriptor =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TripDescriptor class]
                                       fieldNumber:1001
                                      defaultValue:[NyctTripDescriptor defaultInstance]
                               messageOrGroupClass:[NyctTripDescriptor class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    NyctSubwayProtoTxtRoot_nyctStopTimeUpdate =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[TripUpdateStopTimeUpdate class]
                                       fieldNumber:1001
                                      defaultValue:[NyctStopTimeUpdate defaultInstance]
                               messageOrGroupClass:[NyctStopTimeUpdate class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [GtfsRealtimeRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:NyctSubwayProtoTxtRoot_nyctFeedHeader];
  [registry addExtension:NyctSubwayProtoTxtRoot_nyctTripDescriptor];
  [registry addExtension:NyctSubwayProtoTxtRoot_nyctStopTimeUpdate];
}
+ (id<PBExtensionField>) nyctFeedHeader {
  return NyctSubwayProtoTxtRoot_nyctFeedHeader;
}
+ (id<PBExtensionField>) nyctTripDescriptor {
  return NyctSubwayProtoTxtRoot_nyctTripDescriptor;
}
+ (id<PBExtensionField>) nyctStopTimeUpdate {
  return NyctSubwayProtoTxtRoot_nyctStopTimeUpdate;
}
@end

@interface TripReplacementPeriod ()
@property (strong) NSString* routeId;
@property (strong) TimeRange* replacementPeriod;
@end

@implementation TripReplacementPeriod

- (BOOL) hasRouteId {
  return !!hasRouteId_;
}
- (void) setHasRouteId:(BOOL) _value_ {
  hasRouteId_ = !!_value_;
}
@synthesize routeId;
- (BOOL) hasReplacementPeriod {
  return !!hasReplacementPeriod_;
}
- (void) setHasReplacementPeriod:(BOOL) _value_ {
  hasReplacementPeriod_ = !!_value_;
}
@synthesize replacementPeriod;
- (instancetype) init {
  if ((self = [super init])) {
    self.routeId = @"";
    self.replacementPeriod = [TimeRange defaultInstance];
  }
  return self;
}
static TripReplacementPeriod* defaultTripReplacementPeriodInstance = nil;
+ (void) initialize {
  if (self == [TripReplacementPeriod class]) {
    defaultTripReplacementPeriodInstance = [[TripReplacementPeriod alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTripReplacementPeriodInstance;
}
- (instancetype) defaultInstance {
  return defaultTripReplacementPeriodInstance;
}
- (BOOL) isInitialized {
  if (self.hasReplacementPeriod) {
    if (!self.replacementPeriod.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRouteId) {
    [output writeString:1 value:self.routeId];
  }
  if (self.hasReplacementPeriod) {
    [output writeMessage:2 value:self.replacementPeriod];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRouteId) {
    size_ += computeStringSize(1, self.routeId);
  }
  if (self.hasReplacementPeriod) {
    size_ += computeMessageSize(2, self.replacementPeriod);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TripReplacementPeriod*) parseFromData:(NSData*) data {
  return (TripReplacementPeriod*)[[[TripReplacementPeriod builder] mergeFromData:data] build];
}
+ (TripReplacementPeriod*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripReplacementPeriod*)[[[TripReplacementPeriod builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TripReplacementPeriod*) parseFromInputStream:(NSInputStream*) input {
  return (TripReplacementPeriod*)[[[TripReplacementPeriod builder] mergeFromInputStream:input] build];
}
+ (TripReplacementPeriod*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripReplacementPeriod*)[[[TripReplacementPeriod builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TripReplacementPeriod*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TripReplacementPeriod*)[[[TripReplacementPeriod builder] mergeFromCodedInputStream:input] build];
}
+ (TripReplacementPeriod*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TripReplacementPeriod*)[[[TripReplacementPeriod builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TripReplacementPeriodBuilder*) builder {
  return [[TripReplacementPeriodBuilder alloc] init];
}
+ (TripReplacementPeriodBuilder*) builderWithPrototype:(TripReplacementPeriod*) prototype {
  return [[TripReplacementPeriod builder] mergeFrom:prototype];
}
- (TripReplacementPeriodBuilder*) builder {
  return [TripReplacementPeriod builder];
}
- (TripReplacementPeriodBuilder*) toBuilder {
  return [TripReplacementPeriod builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRouteId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"routeId", self.routeId];
  }
  if (self.hasReplacementPeriod) {
    [output appendFormat:@"%@%@ {\n", indent, @"replacementPeriod"];
    [self.replacementPeriod writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRouteId) {
    [dictionary setObject: self.routeId forKey: @"routeId"];
  }
  if (self.hasReplacementPeriod) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.replacementPeriod storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"replacementPeriod"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TripReplacementPeriod class]]) {
    return NO;
  }
  TripReplacementPeriod *otherMessage = other;
  return
      self.hasRouteId == otherMessage.hasRouteId &&
      (!self.hasRouteId || [self.routeId isEqual:otherMessage.routeId]) &&
      self.hasReplacementPeriod == otherMessage.hasReplacementPeriod &&
      (!self.hasReplacementPeriod || [self.replacementPeriod isEqual:otherMessage.replacementPeriod]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRouteId) {
    hashCode = hashCode * 31 + [self.routeId hash];
  }
  if (self.hasReplacementPeriod) {
    hashCode = hashCode * 31 + [self.replacementPeriod hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TripReplacementPeriodBuilder()
@property (strong) TripReplacementPeriod* resultTripReplacementPeriod;
@end

@implementation TripReplacementPeriodBuilder
@synthesize resultTripReplacementPeriod;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTripReplacementPeriod = [[TripReplacementPeriod alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTripReplacementPeriod;
}
- (TripReplacementPeriodBuilder*) clear {
  self.resultTripReplacementPeriod = [[TripReplacementPeriod alloc] init];
  return self;
}
- (TripReplacementPeriodBuilder*) clone {
  return [TripReplacementPeriod builderWithPrototype:resultTripReplacementPeriod];
}
- (TripReplacementPeriod*) defaultInstance {
  return [TripReplacementPeriod defaultInstance];
}
- (TripReplacementPeriod*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TripReplacementPeriod*) buildPartial {
  TripReplacementPeriod* returnMe = resultTripReplacementPeriod;
  self.resultTripReplacementPeriod = nil;
  return returnMe;
}
- (TripReplacementPeriodBuilder*) mergeFrom:(TripReplacementPeriod*) other {
  if (other == [TripReplacementPeriod defaultInstance]) {
    return self;
  }
  if (other.hasRouteId) {
    [self setRouteId:other.routeId];
  }
  if (other.hasReplacementPeriod) {
    [self mergeReplacementPeriod:other.replacementPeriod];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TripReplacementPeriodBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TripReplacementPeriodBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setRouteId:[input readString]];
        break;
      }
      case 18: {
        TimeRangeBuilder* subBuilder = [TimeRange builder];
        if (self.hasReplacementPeriod) {
          [subBuilder mergeFrom:self.replacementPeriod];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setReplacementPeriod:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRouteId {
  return resultTripReplacementPeriod.hasRouteId;
}
- (NSString*) routeId {
  return resultTripReplacementPeriod.routeId;
}
- (TripReplacementPeriodBuilder*) setRouteId:(NSString*) value {
  resultTripReplacementPeriod.hasRouteId = YES;
  resultTripReplacementPeriod.routeId = value;
  return self;
}
- (TripReplacementPeriodBuilder*) clearRouteId {
  resultTripReplacementPeriod.hasRouteId = NO;
  resultTripReplacementPeriod.routeId = @"";
  return self;
}
- (BOOL) hasReplacementPeriod {
  return resultTripReplacementPeriod.hasReplacementPeriod;
}
- (TimeRange*) replacementPeriod {
  return resultTripReplacementPeriod.replacementPeriod;
}
- (TripReplacementPeriodBuilder*) setReplacementPeriod:(TimeRange*) value {
  resultTripReplacementPeriod.hasReplacementPeriod = YES;
  resultTripReplacementPeriod.replacementPeriod = value;
  return self;
}
- (TripReplacementPeriodBuilder*) setReplacementPeriodBuilder:(TimeRangeBuilder*) builderForValue {
  return [self setReplacementPeriod:[builderForValue build]];
}
- (TripReplacementPeriodBuilder*) mergeReplacementPeriod:(TimeRange*) value {
  if (resultTripReplacementPeriod.hasReplacementPeriod &&
      resultTripReplacementPeriod.replacementPeriod != [TimeRange defaultInstance]) {
    resultTripReplacementPeriod.replacementPeriod =
      [[[TimeRange builderWithPrototype:resultTripReplacementPeriod.replacementPeriod] mergeFrom:value] buildPartial];
  } else {
    resultTripReplacementPeriod.replacementPeriod = value;
  }
  resultTripReplacementPeriod.hasReplacementPeriod = YES;
  return self;
}
- (TripReplacementPeriodBuilder*) clearReplacementPeriod {
  resultTripReplacementPeriod.hasReplacementPeriod = NO;
  resultTripReplacementPeriod.replacementPeriod = [TimeRange defaultInstance];
  return self;
}
@end

@interface NyctFeedHeader ()
@property (strong) NSString* nyctSubwayVersion;
@property (strong) NSMutableArray * tripReplacementPeriodArray;
@end

@implementation NyctFeedHeader

- (BOOL) hasNyctSubwayVersion {
  return !!hasNyctSubwayVersion_;
}
- (void) setHasNyctSubwayVersion:(BOOL) _value_ {
  hasNyctSubwayVersion_ = !!_value_;
}
@synthesize nyctSubwayVersion;
@synthesize tripReplacementPeriodArray;
@dynamic tripReplacementPeriod;
- (instancetype) init {
  if ((self = [super init])) {
    self.nyctSubwayVersion = @"";
  }
  return self;
}
static NyctFeedHeader* defaultNyctFeedHeaderInstance = nil;
+ (void) initialize {
  if (self == [NyctFeedHeader class]) {
    defaultNyctFeedHeaderInstance = [[NyctFeedHeader alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNyctFeedHeaderInstance;
}
- (instancetype) defaultInstance {
  return defaultNyctFeedHeaderInstance;
}
- (NSArray *)tripReplacementPeriod {
  return tripReplacementPeriodArray;
}
- (TripReplacementPeriod*)tripReplacementPeriodAtIndex:(NSUInteger)index {
  return [tripReplacementPeriodArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasNyctSubwayVersion) {
    return NO;
  }
  __block BOOL isInittripReplacementPeriod = YES;
   [self.tripReplacementPeriod enumerateObjectsUsingBlock:^(TripReplacementPeriod *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittripReplacementPeriod = NO;
      *stop = YES;
    }
  }];
  if (!isInittripReplacementPeriod) return isInittripReplacementPeriod;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNyctSubwayVersion) {
    [output writeString:1 value:self.nyctSubwayVersion];
  }
  [self.tripReplacementPeriodArray enumerateObjectsUsingBlock:^(TripReplacementPeriod *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNyctSubwayVersion) {
    size_ += computeStringSize(1, self.nyctSubwayVersion);
  }
  [self.tripReplacementPeriodArray enumerateObjectsUsingBlock:^(TripReplacementPeriod *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (NyctFeedHeader*) parseFromData:(NSData*) data {
  return (NyctFeedHeader*)[[[NyctFeedHeader builder] mergeFromData:data] build];
}
+ (NyctFeedHeader*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NyctFeedHeader*)[[[NyctFeedHeader builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NyctFeedHeader*) parseFromInputStream:(NSInputStream*) input {
  return (NyctFeedHeader*)[[[NyctFeedHeader builder] mergeFromInputStream:input] build];
}
+ (NyctFeedHeader*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NyctFeedHeader*)[[[NyctFeedHeader builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NyctFeedHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NyctFeedHeader*)[[[NyctFeedHeader builder] mergeFromCodedInputStream:input] build];
}
+ (NyctFeedHeader*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NyctFeedHeader*)[[[NyctFeedHeader builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NyctFeedHeaderBuilder*) builder {
  return [[NyctFeedHeaderBuilder alloc] init];
}
+ (NyctFeedHeaderBuilder*) builderWithPrototype:(NyctFeedHeader*) prototype {
  return [[NyctFeedHeader builder] mergeFrom:prototype];
}
- (NyctFeedHeaderBuilder*) builder {
  return [NyctFeedHeader builder];
}
- (NyctFeedHeaderBuilder*) toBuilder {
  return [NyctFeedHeader builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNyctSubwayVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nyctSubwayVersion", self.nyctSubwayVersion];
  }
  [self.tripReplacementPeriodArray enumerateObjectsUsingBlock:^(TripReplacementPeriod *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"tripReplacementPeriod"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNyctSubwayVersion) {
    [dictionary setObject: self.nyctSubwayVersion forKey: @"nyctSubwayVersion"];
  }
  for (TripReplacementPeriod* element in self.tripReplacementPeriodArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"tripReplacementPeriod"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[NyctFeedHeader class]]) {
    return NO;
  }
  NyctFeedHeader *otherMessage = other;
  return
      self.hasNyctSubwayVersion == otherMessage.hasNyctSubwayVersion &&
      (!self.hasNyctSubwayVersion || [self.nyctSubwayVersion isEqual:otherMessage.nyctSubwayVersion]) &&
      [self.tripReplacementPeriodArray isEqualToArray:otherMessage.tripReplacementPeriodArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNyctSubwayVersion) {
    hashCode = hashCode * 31 + [self.nyctSubwayVersion hash];
  }
  [self.tripReplacementPeriodArray enumerateObjectsUsingBlock:^(TripReplacementPeriod *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NyctFeedHeaderBuilder()
@property (strong) NyctFeedHeader* resultNyctFeedHeader;
@end

@implementation NyctFeedHeaderBuilder
@synthesize resultNyctFeedHeader;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNyctFeedHeader = [[NyctFeedHeader alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNyctFeedHeader;
}
- (NyctFeedHeaderBuilder*) clear {
  self.resultNyctFeedHeader = [[NyctFeedHeader alloc] init];
  return self;
}
- (NyctFeedHeaderBuilder*) clone {
  return [NyctFeedHeader builderWithPrototype:resultNyctFeedHeader];
}
- (NyctFeedHeader*) defaultInstance {
  return [NyctFeedHeader defaultInstance];
}
- (NyctFeedHeader*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NyctFeedHeader*) buildPartial {
  NyctFeedHeader* returnMe = resultNyctFeedHeader;
  self.resultNyctFeedHeader = nil;
  return returnMe;
}
- (NyctFeedHeaderBuilder*) mergeFrom:(NyctFeedHeader*) other {
  if (other == [NyctFeedHeader defaultInstance]) {
    return self;
  }
  if (other.hasNyctSubwayVersion) {
    [self setNyctSubwayVersion:other.nyctSubwayVersion];
  }
  if (other.tripReplacementPeriodArray.count > 0) {
    if (resultNyctFeedHeader.tripReplacementPeriodArray == nil) {
      resultNyctFeedHeader.tripReplacementPeriodArray = [[NSMutableArray alloc] initWithArray:other.tripReplacementPeriodArray];
    } else {
      [resultNyctFeedHeader.tripReplacementPeriodArray addObjectsFromArray:other.tripReplacementPeriodArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NyctFeedHeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NyctFeedHeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setNyctSubwayVersion:[input readString]];
        break;
      }
      case 18: {
        TripReplacementPeriodBuilder* subBuilder = [TripReplacementPeriod builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTripReplacementPeriod:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNyctSubwayVersion {
  return resultNyctFeedHeader.hasNyctSubwayVersion;
}
- (NSString*) nyctSubwayVersion {
  return resultNyctFeedHeader.nyctSubwayVersion;
}
- (NyctFeedHeaderBuilder*) setNyctSubwayVersion:(NSString*) value {
  resultNyctFeedHeader.hasNyctSubwayVersion = YES;
  resultNyctFeedHeader.nyctSubwayVersion = value;
  return self;
}
- (NyctFeedHeaderBuilder*) clearNyctSubwayVersion {
  resultNyctFeedHeader.hasNyctSubwayVersion = NO;
  resultNyctFeedHeader.nyctSubwayVersion = @"";
  return self;
}
- (NSMutableArray *)tripReplacementPeriod {
  return resultNyctFeedHeader.tripReplacementPeriodArray;
}
- (TripReplacementPeriod*)tripReplacementPeriodAtIndex:(NSUInteger)index {
  return [resultNyctFeedHeader tripReplacementPeriodAtIndex:index];
}
- (NyctFeedHeaderBuilder *)addTripReplacementPeriod:(TripReplacementPeriod*)value {
  if (resultNyctFeedHeader.tripReplacementPeriodArray == nil) {
    resultNyctFeedHeader.tripReplacementPeriodArray = [[NSMutableArray alloc]init];
  }
  [resultNyctFeedHeader.tripReplacementPeriodArray addObject:value];
  return self;
}
- (NyctFeedHeaderBuilder *)setTripReplacementPeriodArray:(NSArray *)array {
  resultNyctFeedHeader.tripReplacementPeriodArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (NyctFeedHeaderBuilder *)clearTripReplacementPeriod {
  resultNyctFeedHeader.tripReplacementPeriodArray = nil;
  return self;
}
@end

@interface NyctTripDescriptor ()
@property (strong) NSString* trainId;
@property BOOL isAssigned;
@property NyctTripDescriptorDirection direction;
@end

@implementation NyctTripDescriptor

- (BOOL) hasTrainId {
  return !!hasTrainId_;
}
- (void) setHasTrainId:(BOOL) _value_ {
  hasTrainId_ = !!_value_;
}
@synthesize trainId;
- (BOOL) hasIsAssigned {
  return !!hasIsAssigned_;
}
- (void) setHasIsAssigned:(BOOL) _value_ {
  hasIsAssigned_ = !!_value_;
}
- (BOOL) isAssigned {
  return !!isAssigned_;
}
- (void) setIsAssigned:(BOOL) _value_ {
  isAssigned_ = !!_value_;
}
- (BOOL) hasDirection {
  return !!hasDirection_;
}
- (void) setHasDirection:(BOOL) _value_ {
  hasDirection_ = !!_value_;
}
@synthesize direction;
- (instancetype) init {
  if ((self = [super init])) {
    self.trainId = @"";
    self.isAssigned = NO;
    self.direction = NyctTripDescriptorDirectionNorth;
  }
  return self;
}
static NyctTripDescriptor* defaultNyctTripDescriptorInstance = nil;
+ (void) initialize {
  if (self == [NyctTripDescriptor class]) {
    defaultNyctTripDescriptorInstance = [[NyctTripDescriptor alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNyctTripDescriptorInstance;
}
- (instancetype) defaultInstance {
  return defaultNyctTripDescriptorInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTrainId) {
    [output writeString:1 value:self.trainId];
  }
  if (self.hasIsAssigned) {
    [output writeBool:2 value:self.isAssigned];
  }
  if (self.hasDirection) {
    [output writeEnum:3 value:self.direction];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTrainId) {
    size_ += computeStringSize(1, self.trainId);
  }
  if (self.hasIsAssigned) {
    size_ += computeBoolSize(2, self.isAssigned);
  }
  if (self.hasDirection) {
    size_ += computeEnumSize(3, self.direction);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (NyctTripDescriptor*) parseFromData:(NSData*) data {
  return (NyctTripDescriptor*)[[[NyctTripDescriptor builder] mergeFromData:data] build];
}
+ (NyctTripDescriptor*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NyctTripDescriptor*)[[[NyctTripDescriptor builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NyctTripDescriptor*) parseFromInputStream:(NSInputStream*) input {
  return (NyctTripDescriptor*)[[[NyctTripDescriptor builder] mergeFromInputStream:input] build];
}
+ (NyctTripDescriptor*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NyctTripDescriptor*)[[[NyctTripDescriptor builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NyctTripDescriptor*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NyctTripDescriptor*)[[[NyctTripDescriptor builder] mergeFromCodedInputStream:input] build];
}
+ (NyctTripDescriptor*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NyctTripDescriptor*)[[[NyctTripDescriptor builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NyctTripDescriptorBuilder*) builder {
  return [[NyctTripDescriptorBuilder alloc] init];
}
+ (NyctTripDescriptorBuilder*) builderWithPrototype:(NyctTripDescriptor*) prototype {
  return [[NyctTripDescriptor builder] mergeFrom:prototype];
}
- (NyctTripDescriptorBuilder*) builder {
  return [NyctTripDescriptor builder];
}
- (NyctTripDescriptorBuilder*) toBuilder {
  return [NyctTripDescriptor builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTrainId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"trainId", self.trainId];
  }
  if (self.hasIsAssigned) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAssigned", [NSNumber numberWithBool:self.isAssigned]];
  }
  if (self.hasDirection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"direction", NSStringFromNyctTripDescriptorDirection(self.direction)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTrainId) {
    [dictionary setObject: self.trainId forKey: @"trainId"];
  }
  if (self.hasIsAssigned) {
    [dictionary setObject: [NSNumber numberWithBool:self.isAssigned] forKey: @"isAssigned"];
  }
  if (self.hasDirection) {
    [dictionary setObject: @(self.direction) forKey: @"direction"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[NyctTripDescriptor class]]) {
    return NO;
  }
  NyctTripDescriptor *otherMessage = other;
  return
      self.hasTrainId == otherMessage.hasTrainId &&
      (!self.hasTrainId || [self.trainId isEqual:otherMessage.trainId]) &&
      self.hasIsAssigned == otherMessage.hasIsAssigned &&
      (!self.hasIsAssigned || self.isAssigned == otherMessage.isAssigned) &&
      self.hasDirection == otherMessage.hasDirection &&
      (!self.hasDirection || self.direction == otherMessage.direction) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTrainId) {
    hashCode = hashCode * 31 + [self.trainId hash];
  }
  if (self.hasIsAssigned) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAssigned] hash];
  }
  if (self.hasDirection) {
    hashCode = hashCode * 31 + self.direction;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL NyctTripDescriptorDirectionIsValidValue(NyctTripDescriptorDirection value) {
  switch (value) {
    case NyctTripDescriptorDirectionNorth:
    case NyctTripDescriptorDirectionEast:
    case NyctTripDescriptorDirectionSouth:
    case NyctTripDescriptorDirectionWest:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromNyctTripDescriptorDirection(NyctTripDescriptorDirection value) {
  switch (value) {
    case NyctTripDescriptorDirectionNorth:
      return @"NyctTripDescriptorDirectionNorth";
    case NyctTripDescriptorDirectionEast:
      return @"NyctTripDescriptorDirectionEast";
    case NyctTripDescriptorDirectionSouth:
      return @"NyctTripDescriptorDirectionSouth";
    case NyctTripDescriptorDirectionWest:
      return @"NyctTripDescriptorDirectionWest";
    default:
      return nil;
  }
}

@interface NyctTripDescriptorBuilder()
@property (strong) NyctTripDescriptor* resultNyctTripDescriptor;
@end

@implementation NyctTripDescriptorBuilder
@synthesize resultNyctTripDescriptor;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNyctTripDescriptor = [[NyctTripDescriptor alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNyctTripDescriptor;
}
- (NyctTripDescriptorBuilder*) clear {
  self.resultNyctTripDescriptor = [[NyctTripDescriptor alloc] init];
  return self;
}
- (NyctTripDescriptorBuilder*) clone {
  return [NyctTripDescriptor builderWithPrototype:resultNyctTripDescriptor];
}
- (NyctTripDescriptor*) defaultInstance {
  return [NyctTripDescriptor defaultInstance];
}
- (NyctTripDescriptor*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NyctTripDescriptor*) buildPartial {
  NyctTripDescriptor* returnMe = resultNyctTripDescriptor;
  self.resultNyctTripDescriptor = nil;
  return returnMe;
}
- (NyctTripDescriptorBuilder*) mergeFrom:(NyctTripDescriptor*) other {
  if (other == [NyctTripDescriptor defaultInstance]) {
    return self;
  }
  if (other.hasTrainId) {
    [self setTrainId:other.trainId];
  }
  if (other.hasIsAssigned) {
    [self setIsAssigned:other.isAssigned];
  }
  if (other.hasDirection) {
    [self setDirection:other.direction];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NyctTripDescriptorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NyctTripDescriptorBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTrainId:[input readString]];
        break;
      }
      case 16: {
        [self setIsAssigned:[input readBool]];
        break;
      }
      case 24: {
        NyctTripDescriptorDirection value = (NyctTripDescriptorDirection)[input readEnum];
        if (NyctTripDescriptorDirectionIsValidValue(value)) {
          [self setDirection:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasTrainId {
  return resultNyctTripDescriptor.hasTrainId;
}
- (NSString*) trainId {
  return resultNyctTripDescriptor.trainId;
}
- (NyctTripDescriptorBuilder*) setTrainId:(NSString*) value {
  resultNyctTripDescriptor.hasTrainId = YES;
  resultNyctTripDescriptor.trainId = value;
  return self;
}
- (NyctTripDescriptorBuilder*) clearTrainId {
  resultNyctTripDescriptor.hasTrainId = NO;
  resultNyctTripDescriptor.trainId = @"";
  return self;
}
- (BOOL) hasIsAssigned {
  return resultNyctTripDescriptor.hasIsAssigned;
}
- (BOOL) isAssigned {
  return resultNyctTripDescriptor.isAssigned;
}
- (NyctTripDescriptorBuilder*) setIsAssigned:(BOOL) value {
  resultNyctTripDescriptor.hasIsAssigned = YES;
  resultNyctTripDescriptor.isAssigned = value;
  return self;
}
- (NyctTripDescriptorBuilder*) clearIsAssigned {
  resultNyctTripDescriptor.hasIsAssigned = NO;
  resultNyctTripDescriptor.isAssigned = NO;
  return self;
}
- (BOOL) hasDirection {
  return resultNyctTripDescriptor.hasDirection;
}
- (NyctTripDescriptorDirection) direction {
  return resultNyctTripDescriptor.direction;
}
- (NyctTripDescriptorBuilder*) setDirection:(NyctTripDescriptorDirection) value {
  resultNyctTripDescriptor.hasDirection = YES;
  resultNyctTripDescriptor.direction = value;
  return self;
}
- (NyctTripDescriptorBuilder*) clearDirection {
  resultNyctTripDescriptor.hasDirection = NO;
  resultNyctTripDescriptor.direction = NyctTripDescriptorDirectionNorth;
  return self;
}
@end

@interface NyctStopTimeUpdate ()
@property (strong) NSString* scheduledTrack;
@property (strong) NSString* actualTrack;
@end

@implementation NyctStopTimeUpdate

- (BOOL) hasScheduledTrack {
  return !!hasScheduledTrack_;
}
- (void) setHasScheduledTrack:(BOOL) _value_ {
  hasScheduledTrack_ = !!_value_;
}
@synthesize scheduledTrack;
- (BOOL) hasActualTrack {
  return !!hasActualTrack_;
}
- (void) setHasActualTrack:(BOOL) _value_ {
  hasActualTrack_ = !!_value_;
}
@synthesize actualTrack;
- (instancetype) init {
  if ((self = [super init])) {
    self.scheduledTrack = @"";
    self.actualTrack = @"";
  }
  return self;
}
static NyctStopTimeUpdate* defaultNyctStopTimeUpdateInstance = nil;
+ (void) initialize {
  if (self == [NyctStopTimeUpdate class]) {
    defaultNyctStopTimeUpdateInstance = [[NyctStopTimeUpdate alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultNyctStopTimeUpdateInstance;
}
- (instancetype) defaultInstance {
  return defaultNyctStopTimeUpdateInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasScheduledTrack) {
    [output writeString:1 value:self.scheduledTrack];
  }
  if (self.hasActualTrack) {
    [output writeString:2 value:self.actualTrack];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasScheduledTrack) {
    size_ += computeStringSize(1, self.scheduledTrack);
  }
  if (self.hasActualTrack) {
    size_ += computeStringSize(2, self.actualTrack);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (NyctStopTimeUpdate*) parseFromData:(NSData*) data {
  return (NyctStopTimeUpdate*)[[[NyctStopTimeUpdate builder] mergeFromData:data] build];
}
+ (NyctStopTimeUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NyctStopTimeUpdate*)[[[NyctStopTimeUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (NyctStopTimeUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (NyctStopTimeUpdate*)[[[NyctStopTimeUpdate builder] mergeFromInputStream:input] build];
}
+ (NyctStopTimeUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NyctStopTimeUpdate*)[[[NyctStopTimeUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NyctStopTimeUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (NyctStopTimeUpdate*)[[[NyctStopTimeUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (NyctStopTimeUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (NyctStopTimeUpdate*)[[[NyctStopTimeUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (NyctStopTimeUpdateBuilder*) builder {
  return [[NyctStopTimeUpdateBuilder alloc] init];
}
+ (NyctStopTimeUpdateBuilder*) builderWithPrototype:(NyctStopTimeUpdate*) prototype {
  return [[NyctStopTimeUpdate builder] mergeFrom:prototype];
}
- (NyctStopTimeUpdateBuilder*) builder {
  return [NyctStopTimeUpdate builder];
}
- (NyctStopTimeUpdateBuilder*) toBuilder {
  return [NyctStopTimeUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasScheduledTrack) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scheduledTrack", self.scheduledTrack];
  }
  if (self.hasActualTrack) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actualTrack", self.actualTrack];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasScheduledTrack) {
    [dictionary setObject: self.scheduledTrack forKey: @"scheduledTrack"];
  }
  if (self.hasActualTrack) {
    [dictionary setObject: self.actualTrack forKey: @"actualTrack"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[NyctStopTimeUpdate class]]) {
    return NO;
  }
  NyctStopTimeUpdate *otherMessage = other;
  return
      self.hasScheduledTrack == otherMessage.hasScheduledTrack &&
      (!self.hasScheduledTrack || [self.scheduledTrack isEqual:otherMessage.scheduledTrack]) &&
      self.hasActualTrack == otherMessage.hasActualTrack &&
      (!self.hasActualTrack || [self.actualTrack isEqual:otherMessage.actualTrack]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasScheduledTrack) {
    hashCode = hashCode * 31 + [self.scheduledTrack hash];
  }
  if (self.hasActualTrack) {
    hashCode = hashCode * 31 + [self.actualTrack hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface NyctStopTimeUpdateBuilder()
@property (strong) NyctStopTimeUpdate* resultNyctStopTimeUpdate;
@end

@implementation NyctStopTimeUpdateBuilder
@synthesize resultNyctStopTimeUpdate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNyctStopTimeUpdate = [[NyctStopTimeUpdate alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNyctStopTimeUpdate;
}
- (NyctStopTimeUpdateBuilder*) clear {
  self.resultNyctStopTimeUpdate = [[NyctStopTimeUpdate alloc] init];
  return self;
}
- (NyctStopTimeUpdateBuilder*) clone {
  return [NyctStopTimeUpdate builderWithPrototype:resultNyctStopTimeUpdate];
}
- (NyctStopTimeUpdate*) defaultInstance {
  return [NyctStopTimeUpdate defaultInstance];
}
- (NyctStopTimeUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (NyctStopTimeUpdate*) buildPartial {
  NyctStopTimeUpdate* returnMe = resultNyctStopTimeUpdate;
  self.resultNyctStopTimeUpdate = nil;
  return returnMe;
}
- (NyctStopTimeUpdateBuilder*) mergeFrom:(NyctStopTimeUpdate*) other {
  if (other == [NyctStopTimeUpdate defaultInstance]) {
    return self;
  }
  if (other.hasScheduledTrack) {
    [self setScheduledTrack:other.scheduledTrack];
  }
  if (other.hasActualTrack) {
    [self setActualTrack:other.actualTrack];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (NyctStopTimeUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (NyctStopTimeUpdateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setScheduledTrack:[input readString]];
        break;
      }
      case 18: {
        [self setActualTrack:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasScheduledTrack {
  return resultNyctStopTimeUpdate.hasScheduledTrack;
}
- (NSString*) scheduledTrack {
  return resultNyctStopTimeUpdate.scheduledTrack;
}
- (NyctStopTimeUpdateBuilder*) setScheduledTrack:(NSString*) value {
  resultNyctStopTimeUpdate.hasScheduledTrack = YES;
  resultNyctStopTimeUpdate.scheduledTrack = value;
  return self;
}
- (NyctStopTimeUpdateBuilder*) clearScheduledTrack {
  resultNyctStopTimeUpdate.hasScheduledTrack = NO;
  resultNyctStopTimeUpdate.scheduledTrack = @"";
  return self;
}
- (BOOL) hasActualTrack {
  return resultNyctStopTimeUpdate.hasActualTrack;
}
- (NSString*) actualTrack {
  return resultNyctStopTimeUpdate.actualTrack;
}
- (NyctStopTimeUpdateBuilder*) setActualTrack:(NSString*) value {
  resultNyctStopTimeUpdate.hasActualTrack = YES;
  resultNyctStopTimeUpdate.actualTrack = value;
  return self;
}
- (NyctStopTimeUpdateBuilder*) clearActualTrack {
  resultNyctStopTimeUpdate.hasActualTrack = NO;
  resultNyctStopTimeUpdate.actualTrack = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
